input {
  kafka {
    bootstrap_servers => "${KAFKA_BOOTSTRAP_SERVERS:daa-kafka1:19092,daa-kafka2:19093,daa-kafka3:19094}"
    topics => ["air-quality-seoul", "stock-data"]
    group_id => "logstash-multi-consumer"
    client_id => "logstash-multi-client"
    consumer_threads => 2
    codec => "json"
    decorate_events => true
    auto_offset_reset => "latest"
  }
}

filter {
  if [source] == "air_quality_api" {
    date {
      match => ["retrieved_at", "ISO8601"]
      target => "@timestamp"
      remove_field => ["retrieved_at"]
    }

    date {
      match => ["dataTime", "yyyy-MM-dd HH:mm"]
      target => "[measurement][measured_at]"
      tag_on_failure => ["_datematchfailure"]
    }

    ruby {
      code => '
        fields_to_convert = ["pm10Value", "pm25Value", "so2Value", "coValue", "o3Value", "no2Value", "khaiValue"]
        fields_to_convert.each do |field|
          value = event.get(field)
          if value && value != "-" && value != "통신장애" && value.is_a?(String)
            begin
              event.set(field, Float(value))
            rescue ArgumentError, TypeError
              event.tag("_floatconversionfailure")
            end
          elsif value == "-" || value == "통신장애"
            event.set(field, nil)
          end
        end

        grade_fields = ["so2Grade", "coGrade", "o3Grade", "no2Grade", "pm10Grade", "pm25Grade", "khaiGrade"]
        grade_fields.each do |field|
          value = event.get(field)
          if value && value != "-" && value.is_a?(String) && !value.strip.empty?
            begin
              event.set(field, Integer(value.strip))
            rescue
              event.set(field, nil)
              event.tag("_integerconversionfailure")
            end
          else
            event.set(field, nil)
          end
        end
      '
    }

    mutate {
      rename => {
        "station_location" => "[station][location]"
        "sidoName" => "[station][province]"
        "stationName" => "[station][name]"
        "dataTime" => "[measurement][measured_time_str]"
        "pm10Value" => "[air_quality][pm10][value]"
        "pm10Grade" => "[air_quality][pm10][grade]"
        "pm10Flag" => "[air_quality][pm10][flag]"
        "pm25Value" => "[air_quality][pm25][value]"
        "pm25Grade" => "[air_quality][pm25][grade]"
        "pm25Flag" => "[air_quality][pm25][flag]"
        "so2Value" => "[air_quality][so2][value]"
        "so2Grade" => "[air_quality][so2][grade]"
        "so2Flag" => "[air_quality][so2][flag]"
        "coValue" => "[air_quality][co][value]"
        "coGrade" => "[air_quality][co][grade]"
        "coFlag" => "[air_quality][co][flag]"
        "o3Value" => "[air_quality][o3][value]"
        "o3Grade" => "[air_quality][o3][grade]"
        "o3Flag" => "[air_quality][o3][flag]"
        "no2Value" => "[air_quality][no2][value]"
        "no2Grade" => "[air_quality][no2][grade]"
        "no2Flag" => "[air_quality][no2][flag]"
        "khaiValue" => "[air_quality][khai][value]"
        "khaiGrade" => "[air_quality][khai][grade]"
      }
    }
  } else if [source] == "stock_price_api" {
    date {
      match => ["retrieved_at", "ISO8601"]
      target => "@timestamp"
      remove_field => ["retrieved_at"]
    }
    date {
      match => ["[data][basDt]", "yyyyMMdd"]
      target => "[data][basDt]"
    }
    mutate {
      convert => { "[data][clpr]" => "float" }
    }

    # 필요한 경우 추가적인 필드도 여기에 convert 가능
  }
}

output {
  if [source] == "air_quality_api" {
    elasticsearch {
      hosts => ["${ES_HOST:elasticsearch}:${ES_PORT:9200}"]
      index => "air-quality-seoul-%{+YYYY.MM.dd}"
      document_id => "%{[measurement][measured_time_str]}-%{[station][name]}"
      user => "elastic" #elastic 접근용
      password => "test123" #elastic 접근용
    }
  } else if [source] == "stock_price_api" {
    elasticsearch {
      hosts => ["${ES_HOST:elasticsearch}:${ES_PORT:9200}"]
      index => "stock-price-%{+YYYY.MM.dd}"
      document_id => "%{[data][srtnCd]}-%{[data][basDt]}"
      user => "elastic" #elastic 접근용
      password => "test123" #elastic 접근용용
    }
  }
  stdout { codec => rubydebug } # 필요 시 주석 해제
}