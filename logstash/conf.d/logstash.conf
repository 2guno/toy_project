input {
  kafka {
    bootstrap_servers => "${KAFKA_BOOTSTRAP_SERVERS:daa-kafka1:19092,daa-kafka2:19093}"
    topics => ["air-quality-seoul"]
    group_id => "logstash-air-quality-seoul-consumer"
    client_id => "logstash-air-quality-seoul-client"
    consumer_threads => 2
    codec => "json"
    decorate_events => true
    auto_offset_reset => "latest"
  }
}

filter {
  # 1. Producer가 추가한 수집 시간을 @timestamp로 사용
  date {
    match => ["retrieved_at", "ISO8601"]
    target => "@timestamp"
    remove_field => ["retrieved_at"]
  }

  # 2. 실제 측정 시간을 별도 필드로 파싱
  date {
    match => ["dataTime", "yyyy-MM-dd HH:mm"]
    target => "[measurement][measured_at]"
    tag_on_failure => ["_datematchfailure"]
  }

  # 3. 숫자 필드 변환 및 오류 값 처리
  ruby {
    code => '
      fields_to_convert = ["pm10Value", "pm25Value", "so2Value", "coValue", "o3Value", "no2Value", "khaiValue"]
      fields_to_convert.each do |field|
        value = event.get(field)
        if value && value != "-" && value != "통신장애" && value.is_a?(String)
          begin
            event.set(field, Float(value))
          rescue ArgumentError, TypeError
            event.tag("_floatconversionfailure")
          end
        elsif value == "-" || value == "통신장애"
           event.set(field, nil)
        end
      end

      grade_fields = ["so2Grade", "coGrade", "o3Grade", "no2Grade", "pm10Grade", "pm25Grade", "khaiGrade"]
      grade_fields.each do |field|
        value = event.get(field)
        if value && value != "-" && value.is_a?(String) && !value.strip.empty?
          begin
            event.set(field, Integer(value.strip))
          rescue
            event.set(field, nil)
            event.tag("_integerconversionfailure")
          end
        else
          event.set(field, nil)
        end
      end
    '
  }

  # 4. 필드 구조화 및 이름 변경
  mutate {
    rename => {
      "station_location" => "[station][location]"
      "sidoName" => "[station][province]"
      "stationName" => "[station][name]"
      "dataTime" => "[measurement][measured_time_str]"
      "pm10Value" => "[air_quality][pm10][value]"
      "pm10Grade" => "[air_quality][pm10][grade]"
      "pm10Flag" => "[air_quality][pm10][flag]"
      "pm25Value" => "[air_quality][pm25][value]"
      "pm25Grade" => "[air_quality][pm25][grade]"
      "pm25Flag" => "[air_quality][pm25][flag]"
      "so2Value" => "[air_quality][so2][value]"
      "so2Grade" => "[air_quality][so2][grade]"
      "so2Flag" => "[air_quality][so2][flag]"
      "coValue" => "[air_quality][co][value]"
      "coGrade" => "[air_quality][co][grade]"
      "coFlag" => "[air_quality][co][flag]"
      "o3Value" => "[air_quality][o3][value]"
      "o3Grade" => "[air_quality][o3][grade]"
      "o3Flag" => "[air_quality][o3][flag]"
      "no2Value" => "[air_quality][no2][value]"
      "no2Grade" => "[air_quality][no2][grade]"
      "no2Flag" => "[air_quality][no2][flag]"
      "khaiValue" => "[air_quality][khai][value]"
      "khaiGrade" => "[air_quality][khai][grade]"
    }
  }
}

output {
  elasticsearch {
    hosts => ["${ES_HOST:elasticsearch}:${ES_PORT:9200}"]
    index => "air-quality-seoul-%{+YYYY.MM.dd}"
    document_id => "%{[measurement][measured_time_str]}-%{[station][name]}"
  }
  
  # 디버깅용 stdout (필요시 주석 해제)
  # stdout { codec => rubydebug }
}